#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Mem.headers.fc";
#include "tact_Mem.stdlib.fc";
#include "tact_Mem.constants.fc";
#include "tact_Mem.storage.fc";

;;
;; Contract Mem functions
;;

((int, slice), ()) $Mem$_fun_walletAddress((int, slice) $self) impure inline_ref {
    var (($self'id, $self'MyMemAddress)) = $self;
    $global_send($SendParameters$_constructor_to_body_value_mode(__gen_slice_address_1c2097cccceeb6793db0d7a3211c0add005fe0db85527e188a9047acff472457(), $ProvideWalletAddress$_store_cell($ProvideWalletAddress$_constructor_query_id_owner_address_include_address(129308, my_address(), true)), 260000000, 2));
    return (($self'id, $self'MyMemAddress), ());
}

(int, slice) $Mem$_contract_init(int $id) impure inline_ref {
    var (($self'id, $self'MyMemAddress)) = (null(), null());
    $self'id = $id;
    $self'MyMemAddress = __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c();
    ($self'id, $self'MyMemAddress)~$Mem$_fun_walletAddress();
    return ($self'id, $self'MyMemAddress);
}

((int, slice), int) $Mem$_fun_id((int, slice) $self) impure inline_ref {
    var (($self'id, $self'MyMemAddress)) = $self;
    return (($self'id, $self'MyMemAddress), $self'id);
}

((int, slice), slice) $Mem$_fun_retAddres((int, slice) $self) impure inline_ref {
    var (($self'id, $self'MyMemAddress)) = $self;
    return (($self'id, $self'MyMemAddress), $self'MyMemAddress);
}

;;
;; Receivers of a Contract Mem
;;

(((int, slice)), ()) $Mem$_internal_binary_TakeWalletAddress((int, slice) $self, (int, slice, slice) $msg) impure inline {
    var ($self'id, $self'MyMemAddress) = $self;
    var ($msg'query_id, $msg'wallet_address, $msg'owner_address) = $msg;
    $self'MyMemAddress = $msg'wallet_address;
    return (($self'id, $self'MyMemAddress), ());
}

(((int, slice)), ()) $Mem$_internal_binary_Bomj((int, slice) $self, (int, int) $msg) impure inline {
    var ($self'id, $self'MyMemAddress) = $self;
    var ($msg'bomj_query_id, $msg'bomj_amount) = $msg;
    $global_send($SendParameters$_constructor_to_body_value_mode($self'MyMemAddress, $Transfer$_store_cell($Transfer$_constructor_query_id_amount_destination_custom_payload_response_destination_forward_ton_amount_forward_payload($msg'bomj_query_id, $msg'bomj_amount, __tact_context_get_sender(), null(), $self'MyMemAddress, 10000000, $Cell$_fun_asSlice(end_cell(store_uint(begin_cell(), 0, 1))))), 260000000, 2));
    return (($self'id, $self'MyMemAddress), ());
}

(((int, slice)), ()) $Mem$_internal_binary_Deploy((int, slice) $self, (int) $deploy) impure inline {
    var ($self'id, $self'MyMemAddress) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'id, $self'MyMemAddress)~$Mem$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'id, $self'MyMemAddress), ());
}

;;
;; Get methods of a Contract Mem
;;

_ %id() method_id(105872) {
    var self = $Mem$_contract_load();
    var res = self~$Mem$_fun_id();
    return res;
}

_ %retAddres() method_id(118039) {
    var self = $Mem$_contract_load();
    var res = self~$Mem$_fun_retAddres();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmdtYrjyMAAKu9CKt4Un4LjbzQHm9qsSY4wQqqVLWvvFPt";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Mem
;;

((int, slice), int) $Mem$_contract_router_internal((int, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive TakeWalletAddress message
    if (op == 3513996288) {
        var msg = in_msg~$TakeWalletAddress$_load();
        self~$Mem$_internal_binary_TakeWalletAddress(msg);
        return (self, true);
    }
    
    ;; Receive Bomj message
    if (op == 1843471338) {
        var msg = in_msg~$Bomj$_load();
        self~$Mem$_internal_binary_Bomj(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Mem$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Mem$_contract_load();
    
    ;; Handle operation
    int handled = self~$Mem$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Mem$_contract_store(self);
}
