;;
;; Header files for Mem
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Transfer$_store
builder $Transfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref;

;; $Transfer$_store_cell
cell $Transfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline;

;; $Bomj$_load
(slice, ((slice, int, int))) $Bomj$_load(slice sc_0) inline;

;; $Mem$_store
builder $Mem$_store(builder build_0, (int) v) inline;

;; $Mem$_load
(slice, ((int))) $Mem$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Mem$init$_load
(slice, ((int))) $Mem$init$_load(slice sc_0) inline;

;; $Mem$_contract_init
(int) $Mem$_contract_init(int $id) impure inline_ref;

;; $Mem$_contract_load
(int) $Mem$_contract_load() impure inline_ref;

;; $Mem$_contract_store
() $Mem$_contract_store((int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $Mem$_fun_id
((int), int) $Mem$_fun_id((int) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Mem$_fun_forward
((int), ()) $Mem$_fun_forward((int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Mem$_fun_notify
((int), ()) $Mem$_fun_notify((int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_body_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_body_value_mode(slice to, cell body, int value, int mode) inline;

;; $Transfer$_constructor_query_id_amount_destination_custom_payload_response_destination_forward_ton_amount_forward_payload
((int, int, slice, slice, cell, int, slice)) $Transfer$_constructor_query_id_amount_destination_custom_payload_response_destination_forward_ton_amount_forward_payload(int query_id, int amount, slice destination, cell custom_payload, slice response_destination, int forward_ton_amount, slice forward_payload) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
